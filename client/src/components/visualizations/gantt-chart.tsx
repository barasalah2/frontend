import { useMemo } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Cell,
  LineChart,
  Line,
  ScatterChart,
  Scatter,
  PieChart,
  Pie,
  Cell as PieCell
} from 'recharts';

/**
 * Props:
 *   data: array of records
 *   spec: JSON spec generated by AI agent (may be empty or undefined)
 *     {
 *       visualizations: [
 *         { type: 'bar'|'line'|'scatter'|'pie', x: string, y?: string, name?: string, value?: string, colors?: string[], title?: string, layout?: 'horizontal'|'vertical' }
 *       ]
 *     }
 */
export function GanttChart({ data, spec }) {
  // Safely handle empty or undefined spec
  const chartConfigs = useMemo(() => {
    return spec?.visualizations && Array.isArray(spec.visualizations)
      ? spec.visualizations
      : [];
  }, [spec]);

  // Early return if no data or no valid spec
  if (!data || data.length === 0 || chartConfigs.length === 0) {
    return (
      <div className="h-64 flex items-center justify-center text-gray-500">
        No data or visualization spec available
      </div>
    );
  }

  // Render each chart defined in spec
  return (
    <>
      {chartConfigs.map((cfg, idx) => {
        const key = `chart-${idx}`;
        const chartTitle = cfg.title || `${cfg.type} chart`;

        switch (cfg.type) {
          case 'bar': {
            const xKey = cfg.x;
            const yKey = cfg.y;
            return (
              <div key={key} className="h-64 w-full mb-8">
                <h3 className="text-lg font-semibold mb-2">{chartTitle}</h3>
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={data}
                    margin={{ top: 20, right: 30, left: 20, bottom: 60 }}
                    layout={cfg.layout || 'horizontal'}
                  >
                    <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                    <XAxis
                      type={cfg.layout === 'vertical' ? 'number' : 'category'}
                      dataKey={xKey}
                      tick={{ fontSize: 12 }}
                    />
                    <YAxis
                      type={cfg.layout === 'vertical' ? 'category' : 'number'}
                      dataKey={yKey}
                      width={120}
                      tickFormatter={val => typeof val === 'number' ? `${val}%` : val}
                    />
                    <Tooltip />
                    <Bar dataKey={yKey} radius={[0, 4, 4, 0]}>
                      {data.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={cfg.color || '#8884d8'} />
                      ))}
                    </Bar>
                  </BarChart>
                </ResponsiveContainer>
              </div>
            );
          }

          case 'line': {
            const xKey = cfg.x;
            const yKey = cfg.y;
            return (
              <div key={key} className="h-64 w-full mb-8">
                <h3 className="text-lg font-semibold mb-2">{chartTitle}</h3>
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>
                    <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                    <XAxis dataKey={xKey} />
                    <YAxis />
                    <Tooltip />
                    <Line type="monotone" dataKey={yKey} dot={false} stroke={cfg.color || '#8884d8'} />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            );
          }

          case 'scatter': {
            const xKey = cfg.x;
            const yKey = cfg.y;
            return (
              <div key={key} className="h-64 w-full mb-8">
                <h3 className="text-lg font-semibold mb-2">{chartTitle}</h3>
                <ResponsiveContainer width="100%" height="100%">
                  <ScatterChart margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>
                    <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                    <XAxis type="number" dataKey={xKey} />
                    <YAxis type="number" dataKey={yKey} />
                    <Tooltip cursor={{ strokeDasharray: '3 3' }} />
                    <Scatter name={cfg.name} data={data} fill={cfg.color || '#8884d8'} />
                  </ScatterChart>
                </ResponsiveContainer>
              </div>
            );
          }

          case 'pie': {
            const nameKey = cfg.name;
            const valueKey = cfg.value;
            return (
              <div key={key} className="h-64 w-full mb-8">
                <h3 className="text-lg font-semibold mb-2">{chartTitle}</h3>
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie data={data} dataKey={valueKey} nameKey={nameKey} outerRadius={80}>
                      {data.map((entry, index) => (
                        <PieCell key={`cell-${index}`} fill={cfg.colors?.[index] || '#8884d8'} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            );
          }

          default:
            return (
              <div key={key} className="text-red-500">
                Unsupported chart type: {cfg.type}
              </div>
            );
        }
      })}
    </>
  );
}
